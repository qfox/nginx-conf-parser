/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,21],$V9=[1,22],$Va=[1,27],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[5,16],$Vg=[5,14,16,17,18,20,21,23,25,28,37,39,41,47,56,69,71],$Vh=[1,36],$Vi=[1,49],$Vj=[1,50],$Vk=[1,51],$Vl=[1,52],$Vm=[1,53],$Vn=[1,43],$Vo=[1,54],$Vp=[1,55],$Vq=[1,48],$Vr=[1,44],$Vs=[1,45],$Vt=[1,46],$Vu=[1,47],$Vv=[1,35],$Vw=[1,37],$Vx=[1,42],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,85],$VC=[8,14,50,51,52,53,54,55,59,61,62,68,73,75,76,77,78,79,80,81],$VD=[8,14,43,44,45,50,51,52,53,54,55,59,61,62,68,73,75,76,77,78,79,80,81],$VE=[8,14,15,43,44,45,50,51,52,53,54,55,59,61,62,68,73,75,76,77,78,79,80,81],$VF=[8,59,60,61],$VG=[44,51,52,53,54,55,73],$VH=[16,68],$VI=[1,123],$VJ=[1,126],$VK=[1,132],$VL=[8,16,68],$VM=[8,50],$VN=[14,17,18,20,21,23,25,28,37,39,41,47,56,69,71],$VO=[14,16,39,51,52,53,54,55,59,61,62,68,73,75,76,77,78,79,80,81];
var parser = {trace: function trace() {
        Jison.print.apply(null, arguments);
    },
yy: {},
symbols_: {"error":2,"ngxInitial":3,"ngxSchema":4,"EOF":5,"ngxLoadBalancingMethod":6,"least_conn":7,";":8,"ip_hash":9,"ngxUpstreamSchema":10,"ngxSchemaDirective":11,"ngxCommand":12,"ngxBlock":13,"TAG":14,"{":15,"}":16,"http":17,"upstream":18,"ngxUpstreamName":19,"server":20,"location":21,"ngxLocationParams":22,"types":23,"ngxMimeTypesMap":24,"geo":25,"ngxVariable":26,"ngxMap":27,"map":28,"ngxIfBlock":29,"ngxSetCommand":30,"ngxInclude":31,"ngxLog":32,"ngxServerName":33,"ngxErrorPage":34,"ngxRewrite":35,"ngxValues":36,"set":37,"ngxValue":38,"include":39,"ngxPath":40,"if":41,"ngxExpr":42,")":43,"=":44,"OPERATOR":45,"REGEX":46,"log":47,"ngxLogParams":48,"ngxLogParam":49,"LOG_PARAM":50,"PATH":51,"URL":52,"URLP":53,"SOCKET":54,"NAMED_LOCATION":55,"server_name":56,"ngxDomains":57,"ngxDomain":58,"DOMAINLIKE":59,"DOMAINREGEX":60,"default":61,"VARIABLE":62,"ngxMapRow":63,"ngxMimeTypesRow":64,"ngxMimeType":65,"ngxFileExtensions":66,"ngxFileExtension":67,"MIMETYPE":68,"error_page":69,"ngxNumbers":70,"rewrite":71,"ngxNumber":72,"NUMBER":73,"ngxLiterals":74,"TRUE":75,"FALSE":76,"NULL":77,"ANY":78,"STRING":79,"SIZE":80,"NETMASK":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"least_conn",8:";",9:"ip_hash",14:"TAG",15:"{",16:"}",17:"http",18:"upstream",20:"server",21:"location",23:"types",25:"geo",28:"map",37:"set",39:"include",41:"if",43:")",44:"=",45:"OPERATOR",46:"REGEX",47:"log",50:"LOG_PARAM",51:"PATH",52:"URL",53:"URLP",54:"SOCKET",55:"NAMED_LOCATION",56:"server_name",59:"DOMAINLIKE",60:"DOMAINREGEX",61:"default",62:"VARIABLE",68:"MIMETYPE",69:"error_page",71:"rewrite",73:"NUMBER",75:"TRUE",76:"FALSE",77:"NULL",78:"ANY",79:"STRING",80:"SIZE",81:"NETMASK"},
productions_: [0,[3,2],[6,2],[6,2],[10,2],[10,1],[4,2],[4,1],[11,2],[11,1],[13,3],[13,4],[13,5],[13,4],[13,5],[13,4],[13,5],[13,6],[13,4],[13,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[30,3],[31,2],[29,6],[42,1],[42,3],[42,3],[32,2],[32,3],[32,4],[48,2],[48,1],[49,1],[22,2],[22,2],[22,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[33,2],[58,1],[58,1],[58,1],[57,1],[57,2],[26,1],[27,3],[27,2],[63,2],[63,1],[63,2],[24,2],[24,1],[64,3],[64,2],[66,2],[66,1],[65,1],[34,4],[34,3],[35,3],[67,1],[40,1],[40,1],[40,1],[40,1],[40,1],[70,2],[70,1],[72,1],[74,1],[74,1],[74,1],[74,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[36,2],[36,2],[36,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$;
break;
case 2: case 3: case 56:
this.$ = [$$[$0-1]];
break;
case 4: case 6:
this.$ = $$[$0], $$[$0].unshift($$[$0-1]);
break;
case 7: case 30: case 37: case 52: case 61: case 65: case 77: case 95:
this.$ = [$$[$0]];
break;
case 10:
this.$ = [$$[$0-2], null];
break;
case 11: case 13: case 15: case 18:
this.$ = [$$[$0-3], $$[$0-1]];
break;
case 12: case 14: case 16:
this.$ = [$$[$0-4], $$[$0-3], $$[$0-1]];
break;
case 17:
this.$ = [$$[$0-5], $$[$0-4], $$[$0-3], $$[$0-1]];
break;
case 26: case 33: case 39: case 40: case 57: case 59: case 63:
this.$ = [$$[$0-1], $$[$0]];
break;
case 27: case 31: case 32: case 34: case 69:
this.$ = [$$[$0-2], $$[$0-1], $$[$0]];
break;
case 28:


        var data = '', files = [];
        if (fs.existsSync($$[$0])) {
            data = fs.readFileSync($$[$0], {encoding: 'utf8'});
        } else {
            files = globsync($$[$0], {silent: true, nonull: false});
            if (files.length) {
                files.forEach(function (v, k) {
                    data += fs.readFileSync(v, {encoding: 'utf8'});
                });
            } else {
                lexer.parseError('File '+$$[$0]+' is not exist.', this);
            }
        }

        lexer._input = data + lexer._input;
        //console.log(lexer._input);process.exit();
//        console.log(lexer.pushState(), lexer, this);process.exit();
        //console.log(fs.readFileSync($$[$0], {encoding: 'utf8'})); process.exit();
        this.$ = ['#', $$[$0-1] + ' ' + $$[$0]];
    
break;
case 29:
this.$ = [$$[$0-5], $$[$0-4], $$[$0-1]];
break;
case 35: case 67:
this.$ = [$$[$0-3], $$[$0-2], $$[$0-1], $$[$0]];
break;
case 36:
this.$ = $$[$0-1], $$[$0-1].push($$[$0]);
break;
case 41:
this.$ = [null, $$[$0]];
break;
case 53: case 60: case 76: case 93: case 94:
this.$ = $$[$0-1]; $$[$0-1].push($$[$0]);
break;
case 54:
this.$ = yytext;
break;
case 55:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0-1]);
break;
case 62:
this.$ = [$$[$0-2], $$[$0-1]];
break;
case 64:
this.$ = $$[$0]; $$[$0].unshift($$[$0-1]);
break;
case 68:
this.$ = [$$[$0-2], $$[$0-1], null, $$[$0]];
break;
case 78:
this.$ = Number(yytext);
break;
case 79:
this.$ = true;
break;
case 80:
this.$ = false;
break;
case 81:
this.$ = null;
break;
case 82:
this.$ = 'any';
break;
}
},
table: [{3:1,4:2,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{1:[3]},{5:[1,28]},o($Vf,[2,7],{11:3,12:4,13:5,30:6,31:7,32:8,33:9,34:10,35:11,29:20,4:29,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve}),{8:[1,30]},o($Vg,[2,9]),{8:[2,20]},{8:[2,21]},{8:[2,22]},{8:[2,23]},{8:[2,24]},{8:[2,25]},{14:$Vh,15:[1,32],26:40,36:31,38:33,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{15:[1,56]},{14:[1,59],19:57,51:[1,58],52:[1,60],53:[1,61],54:[1,62],55:[1,63]},{15:[1,64]},{22:65,40:68,44:[1,67],45:[1,66],51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm},{15:[1,69]},{26:70,62:$Vo},{26:71,62:$Vo},o($Vg,[2,19]),{26:72,62:$Vo},{40:73,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm},{40:74,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm},{57:75,58:76,59:$Vy,60:$Vz,61:$VA},{70:80,72:81,73:$Vq},{46:[1,82]},{14:$Vh,26:40,38:84,40:39,42:83,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{1:[2,1]},o($Vf,[2,6]),o($Vg,[2,8]),{8:[2,26],14:$Vh,26:40,38:86,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VB,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{4:88,11:3,12:4,13:5,14:$V0,16:[1,87],17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},o($VC,[2,95]),o($VD,[2,83]),o($VD,[2,84]),o($VD,[2,85]),o($VD,[2,86]),o($VD,[2,87]),o($VD,[2,88]),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91]),o($VD,[2,92]),o($VD,[2,79]),o($VD,[2,80]),o($VD,[2,81]),o($VD,[2,82]),o($VD,[2,78]),o($VE,[2,71]),o($VE,[2,72]),o($VE,[2,73]),o($VE,[2,74]),o($VE,[2,75]),o($VE,[2,54]),o($VD,[2,66]),{4:89,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{15:[1,90]},{15:[2,42]},{15:[2,43]},{15:[2,44]},{15:[2,45]},{15:[2,46]},{15:[2,47]},{4:91,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{15:[1,92]},{46:[1,93]},{40:94,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm},{15:[2,41]},{24:95,64:96,65:97,68:$Vp},{15:[1,98]},{26:99,62:$Vo},{14:$Vh,26:40,38:100,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:[2,28]},{8:[2,33],14:$Vh,26:40,36:101,38:33,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:[2,48],58:102,59:$Vy,60:$Vz,61:$VA},o($VF,[2,52]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),{40:104,44:[1,103],51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,72:105,73:$Vq},o($VG,[2,77]),{14:$Vh,26:40,36:106,38:33,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{43:[1,107]},{43:[2,30],44:[1,108],45:[1,109]},o($VC,[2,93]),o($VC,[2,94]),o($Vg,[2,10]),{16:[1,110]},{16:[1,111]},{4:114,6:113,7:[1,115],9:[1,116],10:112,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{16:[1,117]},{4:118,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{15:[2,39]},{15:[2,40]},{16:[1,119],64:120,65:97,68:$Vp},o($VH,[2,61]),{14:$VI,66:121,67:122},{14:$Vh,26:40,27:124,31:127,38:128,39:$V9,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VJ,62:$Vo,63:125,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{15:[1,129]},{8:[2,27]},{8:[2,34],14:$Vh,26:40,38:86,40:39,48:130,49:131,50:$VK,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VB,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VF,[2,53]),{40:133,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm},{8:[2,68]},o($VG,[2,76]),{8:[2,69],14:$Vh,26:40,38:86,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VB,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{15:[1,134]},{14:$Vh,26:40,38:135,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{46:[1,136]},o($Vg,[2,18]),o($Vg,[2,11]),{16:[1,137]},{4:138,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{16:[2,5]},{8:[1,139]},{8:[1,140]},o($Vg,[2,13]),{16:[1,141]},o($Vg,[2,15]),o($VH,[2,60]),o($VH,[2,63],{8:[1,142]}),o($VL,[2,65],{67:122,66:143,14:$VI}),o([8,14,16,68],[2,70]),{14:$Vh,16:[1,144],26:40,31:127,38:128,39:$V9,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VJ,62:$Vo,63:145,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:[1,146]},{14:$Vh,26:40,38:147,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:[2,58]},{14:$Vh,26:40,38:148,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,62:$Vo,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{14:$Vh,26:40,27:149,31:127,38:128,39:$V9,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VJ,62:$Vo,63:125,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},{8:[2,35],49:150,50:$VK},o($VM,[2,37]),o($VM,[2,38]),{8:[2,67]},{4:151,11:3,12:4,13:5,14:$V0,17:$V1,18:$V2,20:$V3,21:$V4,23:$V5,25:$V6,28:$V7,29:20,30:6,31:7,32:8,33:9,34:10,35:11,37:$V8,39:$V9,41:$Va,47:$Vb,56:$Vc,69:$Vd,71:$Ve},{43:[2,31]},{43:[2,32]},o($Vg,[2,12]),{16:[2,4]},o($VN,[2,2]),o($VN,[2,3]),o($Vg,[2,14]),o($VH,[2,62]),o($VL,[2,64]),o($Vg,[2,16]),{8:[1,152]},o($VO,[2,56]),{8:[2,57]},{8:[2,59]},{14:$Vh,16:[1,153],26:40,31:127,38:128,39:$V9,40:39,51:$Vi,52:$Vj,53:$Vk,54:$Vl,55:$Vm,59:$Vn,61:$VJ,62:$Vo,63:145,65:41,68:$Vp,72:38,73:$Vq,74:34,75:$Vr,76:$Vs,77:$Vt,78:$Vu,79:$Vv,80:$Vw,81:$Vx},o($VM,[2,36]),{16:[1,154]},o($VO,[2,55]),o($Vg,[2,17]),o($Vg,[2,29])],
defaultActions: {6:[2,20],7:[2,21],8:[2,22],9:[2,23],10:[2,24],11:[2,25],28:[2,1],58:[2,42],59:[2,43],60:[2,44],61:[2,45],62:[2,46],63:[2,47],68:[2,41],73:[2,28],93:[2,39],94:[2,40],100:[2,27],104:[2,68],114:[2,5],127:[2,58],133:[2,67],135:[2,31],136:[2,32],138:[2,4],147:[2,57],148:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var fs = require('fs');
    var globsync = require('glob').sync;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comment */
break;
case 2:return 8;
break;
case 3:return 15;
break;
case 4:return 16;
break;
case 5:return 43;
break;
case 6:return 44;
break;
case 7:return 41;
break;
case 8:return 39;
break;
case 9:return 69;
break;
case 10:return 71;
break;
case 11:return "default";
break;
case 12:return 37;
break;
case 13:return 17;
break;
case 14:return 20;
break;
case 15:return 18;
break;
case 16:return 23;
break;
case 17:return 28;
break;
case 18:return 25;
break;
case 19:return 21;
break;
case 20:return 56;
break;
case 21:return 7;
break;
case 22:return 9;
break;
case 23:return 'js';
break;
case 24:return 47;
break;
case 25:return 77;
break;
case 26:return 78;
break;
case 27:return 75;
break;
case 28:return 76;
break;
case 29:return 80;
break;
case 30:return 81;
break;
case 31:return 59;
break;
case 32:return 73;
break;
case 33:return 79; //"
break;
case 34:return 45;
break;
case 35:return 68;
break;
case 36:return 50;
break;
case 37:return 52;
break;
case 38:return 53;
break;
case 39:return 54;
break;
case 40:return 62;
break;
case 41:return 55;
break;
case 42:return 14;
break;
case 43:return 51;
break;
case 44:return 60;
break;
case 45:return 46;
break;
case 46:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:#[^\n]*)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\))/,/^(?:=)/,/^(?:if(?:\s*\())/,/^(?:include\b)/,/^(?:error_page\b)/,/^(?:rewrite\b)/,/^(?:default\b)/,/^(?:set(?=\s*$\s*))/,/^(?:http(?=\s*\{))/,/^(?:server(?=\s*\{))/,/^(?:upstream(?=\s+))/,/^(?:types(?=\s*\{))/,/^(?:map(?=\s+))/,/^(?:geo(?=\s+))/,/^(?:location\b)/,/^(?:server_name\b)/,/^(?:least_conn\b)/,/^(?:ip_hash\b)/,/^(?:js(?=\s*\{))/,/^(?:(access|error)_log\b)/,/^(?:null\b)/,/^(?:any|all\b)/,/^(?:on|true\b)/,/^(?:off|false\b)/,/^(?:[0-9]+[kmg](?=\b))/,/^(?:(([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/(-?(?:[0-9]|[1-9][0-9]+)))))/,/^(?:((localhost|[\.a-zA-Z0-9][\-a-zA-Z0-9]*\.[\.\-a-zA-Z0-9]*[a-zA-Z0-9]?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)(?::(-?(?:[0-9]|[1-9][0-9]+)))?)(?=\s+|))/,/^(?:[0-9]+(?=\b))/,/^(?:"(?:[^\"]|\\")*")/,/^(?:(\^~|~\*|~)(?=\s))/,/^(?:[A-Za-z\-]+\/[A-Za-z\-\+\.0-9]+)/,/^(?:[A-Za-z_]+=[A-Za-z_0-9]+)/,/^(?:(wss?:|https?:)\/\/(((localhost|[\.a-zA-Z0-9][\-a-zA-Z0-9]*\.[\.\-a-zA-Z0-9]*[a-zA-Z0-9]?|[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)(?::(-?(?:[0-9]|[1-9][0-9]+)))?)|[a-z0-9\-]+)(\/[\/A-Za-z_\-0-9\.\%\?\=\+]+)?)/,/^(?:(wss?:|https?:)\/\/([a-z0-9_\$\{\}\.\-]+)(\/[\/A-Za-z_\-0-9\.\%\?\=\+]+)?)/,/^(?:unix:([\/A-Za-z_\-0-9\.\*]+))/,/^(?:\$[A-Za-z_0-9]+)/,/^(?:@[A-Za-z_\-0-9]+)/,/^(?:[A-Za-z_0-9]+(?=\b[^\.\-]))/,/^(?:([\/A-Za-z_\-0-9\.\*]+))/,/^(?:~(?:[^\s;]+))/,/^(?:(?:[^\s;]+)(?:(?=\s*\)\s*\{)|[^\)](?=\s+\{)|(?=\s*\/)))/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}